SET SCHEMA LEARNING_TO_NOTE;

DROP TABLE "TASKS";
CREATE COLUMN TABLE "TASKS" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NAME" VARCHAR(255),
    "DOMAIN" VARCHAR(255),
    "CONFIG" VARCHAR(255),
    "AUTHOR" VARCHAR(255)
);

DROP TYPE T_INDEX;
CREATE TYPE T_INDEX AS TABLE ("DOCUMENT_ID" VARCHAR(255),
	 "TA_RULE" NVARCHAR(200),
	 "TA_COUNTER" BIGINT CS_FIXED,
	 "TA_TOKEN" NVARCHAR(5000),
	 "TA_LANGUAGE" NVARCHAR(2),
	 "TA_TYPE" NVARCHAR(100),
	 "TA_NORMALIZED" NVARCHAR(5000),
	 "TA_STEM" NVARCHAR(5000),
	 "TA_PARAGRAPH" INTEGER CS_INT,
	 "TA_SENTENCE" INTEGER CS_INT,
	 "TA_CREATED_AT" LONGDATE CS_LONGDATE,
	 "TA_OFFSET" BIGINT CS_FIXED,
	 "TA_PARENT" BIGINT CS_FIXED);

DROP TYPE T_DOCUMENT;
CREATE TYPE T_DOCUMENT AS TABLE ("DOCUMENT_ID" VARCHAR(255), "TEXT" NCLOB);

-- Example Task:
--   CALL add_task('Biomedical Domain', 'BIO_TEXTS', 'LTN::ltn_analysis', 'dr.schneider', ?);
--
-- Parameters:
--   NAME       Some user-friendly name for the task
--   DOMAIN     Name of the table and part of the name of the accompanying full text index
--              -> Table: "BIO_TEXTS", Full Text Index: "INDEX_BIO_TEXTS", Index Output: "$TA_INDEX_BIO_TEXTS"
--   CONFIG     Text analysis configuration to use for the entity recognition full text index
--   AUTHOR     optionally specify who's in charge

DROP PROCEDURE add_task;
CREATE PROCEDURE add_task(IN task_name nvarchar(255), IN table_name nvarchar(255), IN er_analysis_config nvarchar(255), IN author nvarchar(255), OUT task_id INT) LANGUAGE SQLSCRIPT AS
BEGIN
    INSERT INTO TASKS (name, domain, config, author) VALUES (task_name, table_name, er_analysis_config, author);
    SELECT MAX(id) INTO task_id FROM TASKS;
    EXECUTE IMMEDIATE 'CREATE COLUMN TABLE ' || table_name || ' (DOCUMENT_ID VARCHAR(255) PRIMARY KEY, TEXT NCLOB, ER_TEXT NCLOB)';
    EXECUTE IMMEDIATE 'CREATE FULLTEXT INDEX INDEX_' || table_name || ' ON "' || table_name || '"("TEXT") LANGUAGE DETECTION (''EN'') ASYNC PHRASE INDEX RATIO 0.0 CONFIGURATION ''LINGANALYSIS_FULL'' SEARCH ONLY OFF FAST PREPROCESS OFF TEXT ANALYSIS ON TOKEN SEPARATORS ''\/;,.:-_()[]<>!?*@+{}="&#$~|''';
    EXECUTE IMMEDIATE 'CREATE FULLTEXT INDEX ER_INDEX_' || table_name || ' ON "' || table_name || '"("ER_TEXT") CONFIGURATION ''' || er_analysis_config || ''' TEXT ANALYSIS ON';
END;

DROP PROCEDURE add_document;
CREATE PROCEDURE add_document(IN document_id varchar(255), IN document_text NCLOB, IN task INT) LANGUAGE SQLSCRIPT AS
BEGIN
    DECLARE table_id nvarchar(255);
    SELECT concat(t.domain, '') INTO table_id FROM tasks t WHERE t.id = task;
    INSERT INTO DOCUMENTS VALUES (document_id, task);
    EXECUTE IMMEDIATE 'INSERT INTO ' || :table_id || ' VALUES (''' || document_id || ''', ''' || document_text || ''', ''' || document_text || ''')';
END;

DROP PROCEDURE delete_document;
CREATE PROCEDURE delete_document(IN document_id varchar(255)) LANGUAGE SQLSCRIPT AS
BEGIN
    DECLARE table_id nvarchar(255);
    SELECT concat(t.domain, '') INTO table_id FROM tasks t JOIN documents d ON d.task = t.id WHERE d.id = document_id;
    EXECUTE IMMEDIATE 'DELETE FROM ' || :table_id || ' WHERE id = ''' || document_id || '''';
    DELETE FROM DOCUMENTS WHERE id = document_id;
END;

DROP PROCEDURE get_document_content;
CREATE PROCEDURE get_document_content(IN document_id varchar(255), OUT document T_DOCUMENT) LANGUAGE SQLSCRIPT AS
BEGIN
    DECLARE table_id nvarchar(255);
    SELECT concat(t.domain, '') INTO table_id FROM TASKS t JOIN DOCUMENTS d ON d.task = t.id WHERE d.id = document_id;
    CREATE LOCAL TEMPORARY COLUMN TABLE "#temp" LIKE T_DOCUMENT;
    EXECUTE IMMEDIATE 'INSERT INTO "#temp" SELECT document_id, text FROM ' || :table_id || ' WHERE document_id = ''' || document_id || '''';
    document = SELECT * FROM "#temp";
    DROP TABLE "#temp";
END;

DROP PROCEDURE get_fulltext_index;
CREATE PROCEDURE get_fulltext_index(IN document_id varchar(255), OUT o_index T_INDEX) LANGUAGE SQLSCRIPT AS
BEGIN
    DECLARE table_id nvarchar(255);
    SELECT concat(t.domain, '') INTO table_id FROM tasks t JOIN documents d ON d.task = t.id WHERE d.id = document_id;
    table_id := '$TA_INDEX_' || table_id;
    CREATE LOCAL TEMPORARY COLUMN TABLE "#temp" LIKE T_INDEX;
    EXECUTE IMMEDIATE 'INSERT INTO "#temp" SELECT * FROM "' || :table_id || '";';
    o_index = SELECT * FROM "#temp";
    DROP TABLE "#temp";
END;

DROP PROCEDURE get_er_index;
CREATE PROCEDURE get_er_index(IN document_id varchar(255), OUT o_index T_INDEX) LANGUAGE SQLSCRIPT AS
BEGIN
    DECLARE table_id nvarchar(255);
    SELECT concat(t.domain, '') INTO table_id FROM tasks t JOIN documents d ON d.task = t.id WHERE d.id = document_id;
    table_id := '$TA_ER_INDEX_' || table_id;
    CREATE LOCAL TEMPORARY COLUMN TABLE "#temp" LIKE T_INDEX;
    EXECUTE IMMEDIATE 'INSERT INTO "#temp" SELECT * FROM "' || :table_id || '"';
    o_index = SELECT * FROM "#temp";
    DROP TABLE "#temp";
END;
